@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:    <http://www.w3.org/2002/07/owl#> .
@prefix swrl:   <http://www.w3.org/2003/11/swrl#> .
@prefix prov:   <http://www.w3.org/ns/prov#> .
@prefix obo:    <http://purl.obolibrary.org/obo/> .
@prefix dc:     <http://purl.org/dc/elements/1.1/> .
@prefix sssom:  <https://w3id.org/sssom/> .
@base <https://raw.githubusercontent.com/BFO-Mappings/PROV-to-BFO/main/prov-bfo-directmappings.ttl> .

<https://raw.githubusercontent.com/BFO-Mappings/PROV-to-BFO/main/prov-bfo-directmappings.ttl>
  a                     owl:Ontology;
  rdfs:label            "Basic Formal Ontology (BFO) ISO 21838-2:2020 mappings for W3C PROVenance Interchange Ontology (PROV-O)"@en ;
  owl:versionIRI        <https://github.com/BFO-Mappings/PROV-to-BFO/releases/tag/v2024-11-23> ;
  dc:contributor        "Tim Prudhomme", "Giacomo De Colle" , "Austin Liebers" , "Alec Sculley" , "Peihong Karl Xie", "Sydney Cohen", "John Beverley" ;
  dc:license            <https://creativecommons.org/publicdomain/zero/1.0/> ;
  prov:wasDerivedFrom   <http://www.w3.org/ns/prov> ,
                        <https://github.com/bfo-ontology/bfo-2020> ;
  rdfs:seeAlso          <https://basic-formal-ontology.org/> ,
                        <https://github.com/BFO-Mappings/PROV-to-BFO> ;
.

# PROV class mappings and property restrictions
prov:Entity rdf:type owl:Class .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:Entity ;
    owl:annotatedProperty rdfs:subClassOf ; 
    owl:annotatedTarget   [ rdf:type owl:Class ;
                            owl:unionOf ( [ owl:intersectionOf ( obo:BFO_0000004 # independent continuant
                                                                [ rdf:type owl:Class ;
                                                                  owl:complementOf obo:BFO_0000006 # spatial region
                                                                ]
                                                              ) ;
                                            rdf:type owl:Class
                                          ]
                                          obo:BFO_0000031 # generically dependent continuant
                                          obo:BFO_0000020 # specifically dependent continuant
                                        )
                          ] ;
    sssom:object_label    "independent continuant except for spatial region OR generically dependent continuant OR specifically dependent continuant" ;
    rdfs:comment "A prov:Entity is a continuant because it entirely exists at different times. However, a prov:Entity is not a spatial region because spatial regions are causally inert and may not particpate in processes."@en .


prov:Agent rdf:type owl:Class .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:Agent ;
    owl:annotatedProperty rdfs:subClassOf ; 
    owl:annotatedTarget   [ owl:intersectionOf ( obo:BFO_0000040 # material entity
                                                  [ rdf:type owl:Restriction ;
                                                    owl:onProperty obo:BFO_0000056 ; # participates in (at some time) 
                                                    owl:someValuesFrom prov:Activity
                                                  ]
                                                  [ rdf:type owl:Restriction ;
                                                    owl:onProperty obo:BFO_0000196 ; # bearer of
                                                    owl:someValuesFrom [ owl:intersectionOf ( obo:BFO_0000023 # role
                                                                                              [ rdf:type owl:Restriction ;
                                                                                                owl:onProperty obo:BFO_0000054 ; # realized in / has realization
                                                                                                owl:someValuesFrom prov:Activity
                                                                                              ]
                                                                                            ) ;
                                                                        rdf:type owl:Class
                                                                      ]
                                                  ]
                                                ) ;
                            rdf:type owl:Class
                          ] ;
    sssom:object_label    "material entity that participates in (at some time) some Activity  and bears a role realized in that Activity" ;
    rdfs:comment "A prov:Agent is a material entity because always has some matter as a part that persists in time. A prov:Agent participates in (at some time) some prov:Activity and bears a role, that, if realized, is realized in a prov:Activity taking place. This axiomatizes the definition of agent as 'something that bears some form of responsibility for an activity taking place, for the existence of an entity, or for another agent's activity'. According to Requirement VI13 in 'Rationale of Prov', this could be a prov:Entity. A prov:SoftwareAgent is a material entity because it is defined as 'running software', meaning a particular, material carrier of software, as opposed to, for example, its source code. A prov:SoftwareAgent is a particular instance of sofware running on a particular computer."@en .


prov:Activity rdf:type owl:Class .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:Activity ;
    owl:annotatedProperty owl:equivalentClass ; 
    owl:annotatedTarget   obo:BFO_0000015 ;
    sssom:object_label    "process" ;
    rdfs:comment "A prov:Activity is equivalent to a process because it happens over time, while not being a temporal region itself."@en .


prov:Role rdf:type owl:Class .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:Role ;
    owl:annotatedProperty rdfs:subClassOf ; 
    owl:annotatedTarget   obo:BFO_0000023 ; # TODO: realized in an Activity?
    sssom:object_label    "role" ;
    rdfs:comment "A prov:Role is a bfo:role because its externally determined by the context in which the bearer plays the role."@en .


prov:Location rdf:type owl:Class .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:Location ;
    owl:annotatedProperty owl:equivalentClass ; 
    owl:annotatedTarget   obo:BFO_0000029 ;
    sssom:object_label    "site" ;
    rdfs:comment "A prov:location is equivalent to a site because a prov:Location is a three-dimensional immaterial entity that is (partially or wholly) bounded by a material entity or it is a three-dimensional immaterial part), but adds specificity in that it can be an ISO 19112 geographic place or another location in which provenance occurs."@en .


prov:InstantaneousEvent rdf:type owl:Class .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:InstantaneousEvent ;
    owl:annotatedProperty owl:equivalentClass ; 
    owl:annotatedTarget   obo:BFO_0000035 ;
    sssom:object_label    "process boundary" ;
    rdfs:comment "A prov:InstantaneousEvent is equivalent to a process boundary because it is referred to as the boundary (start or end) of a prov:Activity as an occurrent."@en .


prov:Plan rdf:type owl:Class .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:Plan ;
    owl:annotatedProperty rdfs:subClassOf ; 
    owl:annotatedTarget   obo:BFO_0000031 ;
    sssom:object_label    "generically dependent continuant" ;
    rdfs:comment "A prov:Plan exists in virtue of the fact that there is at least one of what may be multiple copies; it is the content or the pattern that the multiple copies share."@en .


prov:Influence rdf:type owl:Class .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource     prov:Influence ;
    owl:annotatedProperty   rdfs:subClassOf ; 
    owl:annotatedTarget     [ owl:intersectionOf ( [ rdf:type owl:Class ;
                                                    owl:unionOf ( obo:BFO_0000015 # process
                                                                  obo:BFO_0000035 # process boundary
                                                                )
                                                    ]
                                                    [ rdf:type owl:Class ;
                                                      owl:complementOf [ owl:intersectionOf ( obo:BFO_0000015 # process
                                                                                              obo:BFO_0000035 # process boundary
                                                                                            ) ;
                                                                        rdf:type owl:Class
                                                                        ]
                                                    ]
                                                ) ;
                                rdf:type owl:Class
                            ] ;
    sssom:object_label    "process or process boundary but not both at once" ;
    rdfs:comment "A prov:Influence is either a process or process boundary, but not both at once, because it occurs over time or at an instant in time. Although prov:Influence is defined as a capacity, all of its subclasses are clearly defined as occurring over time or at an instant. For example, a prov:Generation is a prov:InstantaneousEvent, while a prov:Derivation is a not a prov:InstantaneousEvent, yet both are subclasses of prov:Influence."@en ;
    rdfs:comment: "This is not a disjoint union because while every Influence is either a process or process boundary, some processes & process boundaries are not Influences."@en .


# PROV-Dictionary class mappings
prov:Dictionary rdf:type owl:Class .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:Dictionary ;
    owl:annotatedProperty rdfs:subClassOf ;
    owl:annotatedTarget   obo:BFO_0000031 ;
    sssom:object_label    "generically dependent continuant" ;
    rdfs:comment "A prov:Dictionary exists in virtue of the fact that there is at least one of what may be multiple copies; it is the content or the pattern that the multiple copies share."@en .


prov:KeyEntityPair rdf:type owl:Class .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:KeyEntityPair ;
    owl:annotatedProperty rdfs:subClassOf ;
    owl:annotatedTarget   obo:BFO_0000031 ;
    sssom:object_label    "generically dependent continuant" ;
    rdfs:comment "A prov:KeyEntityPair exists in virtue of the fact that there is at least one of what may be multiple copies; it is the content or the pattern that the multiple copies share."@en .


prov:DictionaryInvolvement rdf:type owl:Class .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:DictionaryInvolvement ;
    owl:annotatedProperty rdfs:subClassOf ;
    owl:annotatedTarget   obo:BFO_0000003 ;
    sssom:object_label    "occurrent" ;
    rdfs:comment "prov:DictionaryInvolvement is undefined and only used in two canonical examples from PROV-Dictionary. Nevertheless, the example instances of prov:DictionaryInvolvement are instances of prov:Removal, which is an occurrent, which suggests that prov:DictionaryInvolvement should also be an occurrent."@en .



# PROV object property mappings
prov:hadMember rdf:type owl:ObjectProperty . obo:BFO_00000178 rdf:type owl:ObjectProperty .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:hadMember ;
    owl:annotatedProperty rdfs:subPropertyOf ;
    owl:annotatedTarget   obo:BFO_00000178 ;
    sssom:object_label    "has continuant part" ;
    rdfs:comment "A prov:Collection that has member some prov:Entity also has it as a continuant part."@en .


prov:hadGeneration rdf:type owl:ObjectProperty . obo:BFO_0000121 rdf:type owl:ObjectProperty .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:hadGeneration ;
    owl:annotatedProperty rdfs:subPropertyOf ;
    owl:annotatedTarget   obo:BFO_0000121 ;
    sssom:object_label    "has temporal part" ;
    rdfs:comment "A prov:Derivation that has generation some prov:Generation also has it as a temporal part."@en .


prov:wasStartedBy rdf:type owl:ObjectProperty . obo:BFO_0000057 rdf:type owl:ObjectProperty .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:wasStartedBy ;
    owl:annotatedProperty rdfs:subPropertyOf ;
    owl:annotatedTarget   obo:BFO_0000057 ;
    sssom:object_label    "has participant (at some time)" ;
    rdfs:comment "A process has a (non spatial region) continuant as a participant. An activity is a process that may be started by a prov:Entity as a participant."@en .


prov:wasEndedBy rdf:type owl:ObjectProperty . obo:BFO_0000057 rdf:type owl:ObjectProperty .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:wasEndedBy ;
    owl:annotatedProperty rdfs:subPropertyOf ;
    owl:annotatedTarget   obo:BFO_0000057 ;
    sssom:object_label    "has participant (at some time)" ;
    rdfs:comment "A process has a (non spatial region) continuant as a participant. An activity is a process that may be ended by a prov:Entity as a participant."@en .


prov:wasAssociatedWith rdf:type owl:ObjectProperty . obo:BFO_0000057 rdf:type owl:ObjectProperty .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:wasAssociatedWith ;
    owl:annotatedProperty rdfs:subPropertyOf ;
    owl:annotatedTarget   obo:BFO_0000057 ;
    sssom:object_label    "has participant (at some time)" ;
    rdfs:comment "A process has a (non spatial region) continuant as a participant. An activity is a process that may be associated with a prov:Entity as a participant."@en .


prov:invalidated rdf:type owl:ObjectProperty . obo:BFO_0000057 rdf:type owl:ObjectProperty .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:invalidated ;
    owl:annotatedProperty rdfs:subPropertyOf ;
    owl:annotatedTarget   obo:BFO_0000057 ;
    sssom:object_label    "has participant (at some time)" ;
    rdfs:comment "A process has a (non spatial region) continuant as a participant. An activity is a process that may be invalidated by a prov:Entity as a participant."@en .


prov:used rdf:type owl:ObjectProperty . obo:BFO_0000057 rdf:type owl:ObjectProperty .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:used ;
    owl:annotatedProperty rdfs:subPropertyOf ;
    owl:annotatedTarget   obo:BFO_0000057 ;
    sssom:object_label    "has participant (at some time)" ;
    rdfs:comment "A process has a (non spatial region) continuant as a participant. An activity is a process that may use a prov:Entity as a participant."@en .


prov:generated rdf:type owl:ObjectProperty . obo:BFO_0000057 rdf:type owl:ObjectProperty .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:generated ;
    owl:annotatedProperty rdfs:subPropertyOf ;
    owl:annotatedTarget   obo:BFO_0000057 ;
    sssom:object_label    "has participant (at some time)" ;
    rdfs:comment "An activity is a process that may be generated by a prov:Entity as a participant."@en .


prov:wasInvalidatedBy rdf:type owl:ObjectProperty . obo:BFO_0000056 rdf:type owl:ObjectProperty .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:wasInvalidatedBy ;
    owl:annotatedProperty rdfs:subPropertyOf ;
    owl:annotatedTarget   obo:BFO_0000056 ;
    sssom:object_label    "participates in (at some time)" ;
    rdfs:comment "An entity (non-spatial region continuant) may participate in its invalidation by an activity (process)"@en .


prov:wasGeneratedBy rdf:type owl:ObjectProperty . obo:BFO_0000056 rdf:type owl:ObjectProperty .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:wasGeneratedBy ;
    owl:annotatedProperty rdfs:subPropertyOf ;
    owl:annotatedTarget   obo:BFO_0000056 ;
    sssom:object_label    "participates in (at some time)" ;
    rdfs:comment "An entity (non-spatial region continuant) may participate in its generation by an activity (process)"@en .


prov:qualifiedStart rdf:type owl:ObjectProperty . obo:BFO_0000121 rdf:type owl:ObjectProperty .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:qualifiedStart ;
    owl:annotatedProperty rdfs:subPropertyOf ;
    owl:annotatedTarget   obo:BFO_0000121 ;
    sssom:object_label    "has temporal part" ;
    rdfs:comment "A prov:Activity whose qualified start is some prov:Start has it as a temporal part."@en .


prov:qualifiedEnd rdf:type owl:ObjectProperty . obo:BFO_0000121 rdf:type owl:ObjectProperty .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:qualifiedEnd ;
    owl:annotatedProperty rdfs:subPropertyOf ;
    owl:annotatedTarget   obo:BFO_0000121 ;
    sssom:object_label    "has temporal part" ;
    rdfs:comment "A prov:Activity whose qualified end is some prov:End has it as a temporal part."@en .


prov:qualifiedUsage rdf:type owl:ObjectProperty . obo:BFO_0000121 rdf:type owl:ObjectProperty .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:qualifiedUsage ;
    owl:annotatedProperty rdfs:subPropertyOf ;
    owl:annotatedTarget   obo:BFO_0000121 ;
    sssom:object_label    "has temporal part" ;
    rdfs:comment "A prov:Activity whose qualified usage is some prov:Usage has it as a temporal part."@en .


prov:hadUsage rdf:type owl:ObjectProperty . obo:BFO_0000121 rdf:type owl:ObjectProperty .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:hadUsage ;
    owl:annotatedProperty rdfs:subPropertyOf ;
    owl:annotatedTarget   obo:BFO_0000121 ;
    sssom:object_label    "has temporal part" ;
    rdfs:comment "A prov:Derivation that had usage some prov:Usage has it as a temporal part."@en .


# PROV-Dictionary object property mappings
prov:hadDictionaryMember rdf:type owl:ObjectProperty . obo:BFO_00000178 rdf:type owl:ObjectProperty .
[]  rdf:type owl:Axiom ;
    owl:annotatedSource   prov:hadDictionaryMember ;
    owl:annotatedProperty rdfs:subPropertyOf ;
    owl:annotatedTarget   obo:BFO_00000178 ;
    sssom:object_label    "has continuant part (at some time)" ;
    rdfs:comment "A prov:Dictionary has a prov:Key-Entity Pair as a member, then it has it as a continuant part."@en .



# PROV object property mappings using SWRL rules

:x rdf:type swrl:Variable .
:y rdf:type swrl:Variable .

# prov:atLocation(?x, ?y) ^ prov:Activity(?x) -> obo:BFO_0000066(?x, ?y)
[ <http://swrl.stanford.edu/ontologies/3.3/swrla.owl#isRuleEnabled> "true"^^xsd:boolean ;
   rdfs:comment "If an Activity is at some location, then it occurs in that location" ;
   rdfs:label "Activity atLocation -> occurs in" ;
   rdf:type swrl:Imp ;
   swrl:body [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate prov:atLocation ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest [ rdf:type swrl:AtomList ;
                            rdf:first [ rdf:type swrl:ClassAtom ;
                                        swrl:classPredicate prov:Activity ;
                                        swrl:argument1 :x
                                    ] ;
                            rdf:rest rdf:nil
                        ]
                ] ;
   swrl:head [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate obo:BFO_0000066 ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest rdf:nil
                ]
 ] .

# prov:atLocation(?x, ?y) ^ prov:InstantaneousEvent(?x) -> obo:BFO_0000066(?x, ?y)
[ <http://swrl.stanford.edu/ontologies/3.3/swrla.owl#isRuleEnabled> "true"^^xsd:boolean ;
   rdfs:comment "If an InstantaneousEvent is at some location, then it occurs in that location" ;
   rdfs:label "InstantaneousEvent atLocation -> occurs in" ;
   rdf:type swrl:Imp ;
   swrl:body [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate prov:atLocation ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest [ rdf:type swrl:AtomList ;
                            rdf:first [ rdf:type swrl:ClassAtom ;
                                        swrl:classPredicate prov:InstantaneousEvent ;
                                        swrl:argument1 :x
                                    ] ;
                            rdf:rest rdf:nil
                        ]
                ] ;
   swrl:head [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate obo:BFO_0000066 ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest rdf:nil
                ]
 ] .

# obo:BFO_0000066(?x, ?y) ^ prov:Location(?y) -> prov:atLocation(?x, ?y)
[ <http://swrl.stanford.edu/ontologies/3.3/swrla.owl#isRuleEnabled> "true"^^xsd:boolean ;
   rdfs:comment "If something occurs in a Location, then it is located at that Location" ;
   rdfs:label "occurs in Location -> atLocation" ;
   rdf:type swrl:Imp ;
   swrl:body [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate obo:BFO_0000066 ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest [ rdf:type swrl:AtomList ;
                            rdf:first [ rdf:type swrl:ClassAtom ;
                                        swrl:classPredicate prov:Location ;
                                        swrl:argument1 :y
                                    ] ;
                            rdf:rest rdf:nil
                        ]
                ] ;
   swrl:head [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate prov:atLocation ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest rdf:nil
                ]
 ] .

# prov:atLocation(?x, ?y) ^ prov:Entity(?x) -> obo:BFO_0000171(?x, ?y)
[ <http://swrl.stanford.edu/ontologies/3.3/swrla.owl#isRuleEnabled> "true"^^xsd:boolean ;
   rdfs:comment "If a prov:Entity is at some location, then it is located in that location" ;
   rdfs:label "Entity atLocation -> located in" ;
   rdf:type swrl:Imp ;
   swrl:body [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate prov:atLocation ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest [ rdf:type swrl:AtomList ;
                            rdf:first [ rdf:type swrl:ClassAtom ;
                                        swrl:classPredicate prov:Entity ;
                                        swrl:argument1 :x
                                    ] ;
                            rdf:rest rdf:nil
                        ]
                ] ;
   swrl:head [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate obo:BFO_0000171 ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest rdf:nil
                ]
 ] .

# prov:atLocation(?x, ?y) ^ prov:Agent(?x) -> obo:BFO_0000171(?x, ?y)
 [ <http://swrl.stanford.edu/ontologies/3.3/swrla.owl#isRuleEnabled> "true"^^xsd:boolean ;
   rdfs:comment "If a prov:Agent is at some location, then it is located in that location" ;
   rdfs:label "Agent atLocation -> located in" ;
   rdf:type swrl:Imp ;
   swrl:body [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate prov:atLocation ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest [ rdf:type swrl:AtomList ;
                            rdf:first [ rdf:type swrl:ClassAtom ;
                                        swrl:classPredicate prov:Agent ;
                                        swrl:argument1 :x
                                    ] ;
                            rdf:rest rdf:nil
                        ]
                ] ;
   swrl:head [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate obo:BFO_0000171 ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest rdf:nil
                ]
 ] .

# obo:BFO_0000171(?x, ?y) ^ prov:Location(?y) -> prov:atLocation(?x, ?y)
[ <http://swrl.stanford.edu/ontologies/3.3/swrla.owl#isRuleEnabled> "true"^^xsd:boolean ;
   rdfs:comment "If something is located in a prov:Location, then it's located at that Location" ;
   rdfs:label "located in Location -> atLocation" ;
   rdf:type swrl:Imp ;
   swrl:body [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate obo:BFO_0000171 ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest [ rdf:type swrl:AtomList ;
                            rdf:first [ rdf:type swrl:ClassAtom ;
                                        swrl:classPredicate prov:Location ;
                                        swrl:argument1 :y
                                    ] ;
                            rdf:rest rdf:nil
                        ]
                ] ;
   swrl:head [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate prov:atLocation ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest rdf:nil
                ]
 ] .

# prov:hadRole(?x, ?y) ^ obo:BFO_0000015(?x) -> obo:BFO_0000057(?x, ?y)
 [ <http://swrl.stanford.edu/ontologies/3.3/swrla.owl#isRuleEnabled> "true"^^xsd:boolean ;
   rdfs:comment "If a process Influence had role some Role, then it had that Role as a participant" ;
   rdfs:label "hadRole -> has participant" ;
   rdf:type swrl:Imp ;
   swrl:body [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate prov:hadRole ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest [ rdf:type swrl:AtomList ;
                            rdf:first [ rdf:type swrl:ClassAtom ;
                                        swrl:classPredicate obo:BFO_0000015 ;
                                        swrl:argument1 :x
                                    ] ;
                            rdf:rest rdf:nil
                        ]
                ] ;
   swrl:head [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate obo:BFO_0000057 ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest rdf:nil
                ]
 ] .

 # prov:entity(?x, ?y) ^ obo:BFO_0000015(?x) -> obo:BFO_0000057(?x, ?y)
[ <http://swrl.stanford.edu/ontologies/3.3/swrla.owl#isRuleEnabled> "true"^^xsd:boolean ;
   rdfs:comment "prov:entity is a relation between an entity and its influence reified as an instance of the class EntityInfluence. This mapping translates a subset of prov:entity relations in terms of continuants being participants in processes. If an EntityInfluence is a BFO process and is the EntityInfluence of an Entity, then that EntityInfluence has participant that Entity as the prov:influencer.";
   rdfs:label "EntityInfluence entity -> has participant (at some time)" ;
   rdf:type swrl:Imp ;
   swrl:body [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate prov:entity ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest [ rdf:type swrl:AtomList ;
                            rdf:first [ rdf:type swrl:ClassAtom ;
                                        swrl:classPredicate obo:BFO_0000015 ;
                                        swrl:argument1 :x
                                    ] ;
                            rdf:rest rdf:nil
                        ]
                ] ;
   swrl:head [  rdf:type swrl:AtomList ;
                rdf:first [ rdf:type swrl:IndividualPropertyAtom ;
                            swrl:propertyPredicate obo:BFO_0000057 ;
                            swrl:argument1 :x ;
                            swrl:argument2 :y
                            ] ;
                rdf:rest rdf:nil
                ]
 ] .