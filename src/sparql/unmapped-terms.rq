PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX swrl: <http://www.w3.org/2003/11/swrl#> 
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>

PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX bfo: <http://purl.obolibrary.org/obo/BFO_>
PREFIX ro: <http://purl.obolibrary.org/obo/RO_>
PREFIX cco: <http://www.ontologyrepository.com/CommonCoreOntologies/>

# Note: filters only work when all referenced terms and their axioms are succesfully imported
SELECT DISTINCT ?targetTerm ?label
WHERE {
  # What kinds of terms are we mapping?
  VALUES ?termType { owl:Class owl:ObjectProperty } .
  ?targetTerm a ?termType .

  # What target ontology are we mapping to?
  FILTER ( STRSTARTS(STR(?targetTerm), STR(prov:)) ) .

  # By excluding these relations, we know which terms are missing mappings, and can infer which terms have mappings
  FILTER NOT EXISTS {
    # Predicate filter
    VALUES ?mappingPredicate { 
      rdfs:subClassOf rdfs:subPropertyOf owl:equivalentClass owl:equivalentProperty 
      # Note: these SKOS terms could be used, but aren't as useful for automated reasoning
      # skos:closeMatch skos:exactMatch skos:broadMatch skos:narrowMatch skos:relatedMatch
    } .

    # Filter from source ontologies
    FILTER ( 
      STRSTARTS(STR(?sourceTerm), STR(bfo:)) || STRSTARTS(STR(?sourceTerm), STR(ro:)) || STRSTARTS(STR(?sourceTerm), STR(cco:))
    ) .
    
    # Direct mappings
    { 
      ?targetTerm ?mappingPredicate ?sourceTerm .
    }
    UNION
    {
      ?sourceTerm ?mappingPredicate ?targetTerm .
    }
    # Transitive mappings
    UNION
    { 
      ?targetTerm (rdfs:subClassOf|rdfs:subPropertyOf)* ?targetTransitive . 
      ?targetTransitive ?mappingPredicate ?sourceTerm .
    }
    # Property chains
    UNION
    {
      ?targetTerm owl:propertyChainAxiom ?propertyChainAxiomList .
      ?propertyChainAxiomList rdf:rest/rdf:first ?sourceTerm .
    }

    ##### INVERSES
    # Exclude terms whose inverses are mapped according to same criteria above. 
    # TODO: Can we simplify by reusing this logic somehow?
    UNION
    {
      # Inverses
      {
        ?targetTerm owl:inverseOf ?targetInverse .
      }
      UNION
      {
        ?targetInverse owl:inverseOf ?targetTerm .
      }
      # Direct mappings of inverses
      {
        ?targetInverse ?mappingPredicate ?sourceTerm .
      }
      UNION
      {
        ?sourceTerm ?mappingPredicate ?targetInverse .
      }
      # Transitive mappings of inverses
      UNION
      { 
        ?targetInverse (rdfs:subClassOf|rdfs:subPropertyOf)* ?targetTransitive . 
        ?targetTransitive ?mappingPredicate ?sourceTerm .
      }
      # Property chains of inverses
      UNION
      {
        ?targetInverse owl:propertyChainAxiom ?inversePropertyChainAxiomList .
        ?inversePropertyChainAxiomList rdf:rest/rdf:first ?sourceTerm .
      }
    }
  }
  
  # SWRL rule mappings
  FILTER NOT EXISTS {
    # FILTER ( 
    #   STRSTARTS(STR(?sourceTerm), STR(bfo:)) || STRSTARTS(STR(?sourceTerm), STR(ro:)) || STRSTARTS(STR(?sourceTerm), STR(cco:))
    # ) .
    # TODO: Require that either source term in head and target term in body, or vica versa
    {
      ?swrlMapping swrl:propertyPredicate ?targetTerm .
    }
    # SWRL rules for inverses
    UNION
    {
      # Inverses
      {
        ?targetInverse owl:inverseOf ?targetTerm .
      }
      UNION
      {
        ?targetTerm owl:inverseOf ?targetInverse .
      }
      ?swrlMapping swrl:propertyPredicate ?targetInverse .
    }
  }

  OPTIONAL {
    ?targetTerm rdfs:label ?label .
  }
  
} ORDER BY ?termType ?targetTerm